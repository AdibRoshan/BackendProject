// <auto-generated />
using System;
using BackendProject.AppdbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250424043606_fdsgn")]
    partial class fdsgn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendProject.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HouseName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LandMark")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostOffice")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BackendProject.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("carts");
                });

            modelBuilder.Entity("BackendProject.Models.CartItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("cartItems");
                });

            modelBuilder.Entity("BackendProject.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "HotWheels"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Matchbox"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "LEGO Cars"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Die-Cast Classics"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "JDM Legends"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Supercars"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Muscle Cars"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Vintage Cars"
                        });
                });

            modelBuilder.Entity("BackendProject.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("placed");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BackendProject.Models.OrderItems", b =>
                {
                    b.Property<int>("OrderItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemsId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.HasKey("OrderItemsId");

                    b.HasIndex("OrderId");

                    b.HasIndex("productId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BackendProject.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "The Hot Wheels Nissan GT-R R34 is a detailed 1:64 scale die-cast model",
                            Image = "https://example.com/gtr.jpg",
                            Price = 700m,
                            Title = "Nissan Gtr R34",
                            stock = 20
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            Description = "A rugged 4x4 model great for all terrains, with a realistic design.",
                            Image = "https://example.com/jeep4x4.jpg",
                            Price = 250m,
                            Title = "Matchbox Jeep 4x4",
                            stock = 50
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3,
                            Description = "LEGO model of the Ferrari F8 with buildable parts.",
                            Image = "https://example.com/lego-f8.jpg",
                            Price = 1200m,
                            Title = "LEGO Ferrari F8",
                            stock = 10
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 4,
                            Description = "Classic die-cast model of the '67 Impala.",
                            Image = "https://example.com/chevy67.jpg",
                            Price = 850m,
                            Title = "1967 Chevy Impala",
                            stock = 25
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 5,
                            Description = "JDM icon with detailed paint and decals.",
                            Image = "https://example.com/silvia-s15.jpg",
                            Price = 950m,
                            Title = "Nissan Silvia S15",
                            stock = 18
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 6,
                            Description = "Supercar model in stunning yellow finish.",
                            Image = "https://example.com/lamborghini.jpg",
                            Price = 1300m,
                            Title = "Lamborghini Aventador",
                            stock = 14
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 7,
                            Description = "Muscle car legend, bulky and powerful.",
                            Image = "https://example.com/dodge.jpg",
                            Price = 890m,
                            Title = "Dodge Challenger SRT",
                            stock = 30
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 8,
                            Description = "Vintage charm with realistic curves and wheels.",
                            Image = "https://example.com/beetle.jpg",
                            Price = 600m,
                            Title = "Volkswagen Beetle 1960",
                            stock = 40
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 1,
                            Description = "A sleek blue Bugatti die-cast toy from Hot Wheels.",
                            Image = "https://example.com/bugatti.jpg",
                            Price = 750m,
                            Title = "Hot Wheels Bugatti Chiron",
                            stock = 20
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2,
                            Description = "Fire & rescue truck with moveable parts.",
                            Image = "https://example.com/rescue.jpg",
                            Price = 300m,
                            Title = "Matchbox Rescue Truck",
                            stock = 35
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3,
                            Description = "A complex build of the McLaren racing car.",
                            Image = "https://example.com/mclaren.jpg",
                            Price = 1500m,
                            Title = "LEGO Technic McLaren",
                            stock = 8
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4,
                            Description = "Classic Mustang GT in matte black.",
                            Image = "https://example.com/mustang69.jpg",
                            Price = 1000m,
                            Title = "Ford Mustang GT 1969",
                            stock = 22
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 5,
                            Description = "Detailed JDM favorite in orange.",
                            Image = "https://example.com/supra.jpg",
                            Price = 980m,
                            Title = "Toyota Supra MK4",
                            stock = 15
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 6,
                            Description = "Super detailed supercar model.",
                            Image = "https://example.com/pagani.jpg",
                            Price = 1400m,
                            Title = "Pagani Huayra",
                            stock = 12
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 7,
                            Description = "Bright orange muscle car with black stripes.",
                            Image = "https://example.com/camaro.jpg",
                            Price = 820m,
                            Title = "Chevrolet Camaro ZL1",
                            stock = 28
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 8,
                            Description = "Vintage Mini Cooper with UK flag top.",
                            Image = "https://example.com/mini.jpg",
                            Price = 700m,
                            Title = "Mini Cooper Classic",
                            stock = 19
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 1,
                            Description = "Electric performance in die-cast form.",
                            Image = "https://example.com/tesla.jpg",
                            Price = 680m,
                            Title = "Hot Wheels Tesla Roadster",
                            stock = 20
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 2,
                            Description = "Detailed black-and-white police car.",
                            Image = "https://example.com/police.jpg",
                            Price = 320m,
                            Title = "Matchbox Police Cruiser",
                            stock = 40
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 3,
                            Description = "Iconic Porsche built from LEGO bricks.",
                            Image = "https://example.com/porsche-lego.jpg",
                            Price = 1350m,
                            Title = "LEGO Porsche 911 RSR",
                            stock = 9
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 4,
                            Description = "Vintage fins and chrome in this die-cast classic.",
                            Image = "https://example.com/eldorado.jpg",
                            Price = 950m,
                            Title = "Cadillac Eldorado 1959",
                            stock = 16
                        });
                });

            modelBuilder.Entity("BackendProject.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("user");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "roshan@gmail.com",
                            IsBlocked = false,
                            Password = "$2a$12$VPH.AgRYn10oZFsyAELKLuLs5tmO6ju3W0zWdizRqU7hnJESFtNWG",
                            Role = "Admin",
                            UserName = "Roshan"
                        });
                });

            modelBuilder.Entity("BackendProject.Models.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("wishList");
                });

            modelBuilder.Entity("BackendProject.Models.Address", b =>
                {
                    b.HasOne("BackendProject.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendProject.Models.Cart", b =>
                {
                    b.HasOne("BackendProject.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("BackendProject.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendProject.Models.CartItems", b =>
                {
                    b.HasOne("BackendProject.Models.Cart", "Cart")
                        .WithMany("cartitems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendProject.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BackendProject.Models.Order", b =>
                {
                    b.HasOne("BackendProject.Models.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackendProject.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendProject.Models.OrderItems", b =>
                {
                    b.HasOne("BackendProject.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BackendProject.Models.Product", b =>
                {
                    b.HasOne("BackendProject.Models.Category", "category")
                        .WithMany("products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("BackendProject.Models.WishList", b =>
                {
                    b.HasOne("BackendProject.Models.Product", "products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendProject.Models.User", "users")
                        .WithMany("WishList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("products");

                    b.Navigation("users");
                });

            modelBuilder.Entity("BackendProject.Models.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BackendProject.Models.Cart", b =>
                {
                    b.Navigation("cartitems");
                });

            modelBuilder.Entity("BackendProject.Models.Category", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("BackendProject.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BackendProject.Models.Product", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("BackendProject.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("WishList");
                });
#pragma warning restore 612, 618
        }
    }
}
